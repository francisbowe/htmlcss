Aprenda CSS Flexbox criando uma galeria de fotos

Passo 7
Para visualizar melhor o tamanho dos elementos, pode ser útil adicionar uma borda.
Dê ao elemento .gallery uma width de 50% e uma border de 5px solid red.
Em seguida, dê ao elemento img uma width de 100%, um padding de 5px e uma border de 5px solid blue.

Passo 8
A propriedade box-sizing é usada para definir esse comportamento. Por padrão, o modelo content-box é usado. Com esse modelo, quando um elemento tem uma largura específica, essa largura é calculada apenas com base no conteúdo do elemento. Os valores de preenchimento e das bordas são adicionados à largura total. Assim, o elemento cresce para acomodar esses valores.

Tente definir o box-sizing para content-box explicitamente, com o seletor global *. Nesse ponto, você não verá nenhuma mudança, porque você está usando o valor padrão.

Passo 9
O modelo de dimensionamento border-box faz o oposto de content-box. A largura total do elemento, incluindo preenchimento e borda, será o conjunto de largura explícita. O conteúdo do elemento encolherá para dar espaço ao preenchimento e à borda.

Altere a propriedade box-sizing para border-box. Observe como a borda azul da imagem se ajusta dentro da borda vermelha da galeria.

Passo 14
Flexbox é um layout de CSS unidimensional que pode controlar a forma como os itens são espaçados e alinhados dentro de um contêiner.

Para usá-lo, dê a um elemento uma propriedade display de flex. Isto fará do elemento um contêiner flex. Todos os filhos direto de um contêiner flex são chamados de itens flex.

Crie um seletor .gallery e torne-o um contêiner flex.

Passo 15
O Flexbox tem um eixo principal e um eixo cruzado. O eixo principal é definido pela propriedade flex-direction, que tem quatro valores possíveis:

row (padrão): eixo horizontal com os itens flex items da esquerda para a direita
row-reverse: eixo horizontal com os itens flex da direita para a esquerda
column: eixo vertical com os itens flex de cima para baixo
column-reverse: eixo vertical com os itens flex de baixo para cima
Observação: os eixos e direções serão diferentes, dependendo da direção do texto. Os valores mostrados são para uma direção de texto da esquerda para a direita.

Experimente os diferentes valores para ver como eles afetam o layout.

Quando estiver pronto, defina explicitamente uma flex-direction de row no elemento .gallery.

Passo 16
A propriedade flex-wrap determina como os itens flex se comportam quando o contêiner flex for muito pequeno. Defini-la como wrap permitirá que os itens sejam associados à próxima linha ou coluna. nowrap (padrão) impedirá que os itens sejam associados ou que encolham, se necessário.

Faça com que seus itens flex sejam associados à próxima linha quando eles ficarem sem espaço.

Passo 17
A propriedade justify-content determina como os itens dentro de um contêiner flex são posicionados no eixo principal, afetando a posição e o espaço ao seu redor.

Dê ao seletor .gallery a propriedade justify-content com o valor de center.

Passo 18
A propriedade align-items posiciona o conteúdo do flex ao longo do eixo transversal. Neste caso, com flex-direction definido como row, o eixo cruzado seria vertical.

Para centralizar as imagens na vertical, dê ao seletor .gallery uma propriedade align-items definida como center.

Passo 19
Dê ao seletor .gallery uma propriedade padding definida como 20px 10px para criar algum espaço em torno do contêiner.

Então, dê a ele uma max-width de 1400px e adicione uma margin de 0 auto para centralizá-la.

Passo 20
Observe como algumas de suas imagens ficaram distorcidas. Isto ocorre porque as imagens têm proporções diferentes. Em vez de definir cada proporção individualmente, você pode usar a propriedade object-fit para determinar como as imagens devem se comportar.

Dê ao seletor .gallery img a propriedade object-fit com o valor cover. Isto informará a imagem que ela deve preencher o contêiner img enquanto mantém a proporção, resultando em um corte para o ajuste.

Passo 21
Suas imagens precisam de espaço entre elas.

A propriedade abreviada gap do CSS define as lacunas (gaps), também conhecidas como calhas, entre as linhas e as colunas. A propriedade gap e suas subpropriedades row-gap e column-gap fornecem essa funcionalidade para layouts flex, grid e multicolunas. Você aplica a propriedade ao elemento contêiner.

Dê ao seu contêiner flex .gallery uma propriedade gap com o valor 16px.

Passo 23
O pseudoelemento ::after cria um elemento que é o último filho do elemento selecionado. Você pode usá-lo para adicionar um elemento vazio após a última imagem. Se você der a esse elemento a mesma width das imagens, ele empurrará a última imagem para a esquerda quando a galeria estiver em um layout de duas colunas. Neste momento, ele está no centro porque você definiu justify-content: center no contêiner flex.

Exemplo:

.container::after {
  content: "";
  width: 860px;
}